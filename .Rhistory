facet_grid(am~.)
library(ggplot2)
# Plots diferentes juntos (diferente de Facet)
install.packages("gridExtra")
library(gridExtra)
library(ggplot2)
# Dataset diamonds
data(diamonds)
# Histograma como plot1
plot1 <- qplot(price, data = diamonds, binwidth = 1000)
# ScatterPlot como plot2
plot2 <- qplot(carat, price, data = diamonds, colour = cut)
# Combina os 2 plots na mesma Ã¡rea
grid.arrange(plot1, plot2, ncol = 1)
ggplot(data = diamonds, aes(x = price, group = cut, fill = cut)) +
geom_density(adjust = 1.5)
ggplot(data = diamonds, aes(x = price, group = cut, fill = cut)) +
geom_density(adjust = 1.5 , alpha = 0.2)
ggplot(data = diamonds,aes(x = price, group = cut, fill = cut)) +
geom_density(adjust = 1.5, position = "fill")
install.packages("reshape2")
install.packages("plotly")
library(reshape2)
library(plotly)
install.packages("reshape2")
library(reshape2)
library(plotly)
sp <- ggplot(tips, aes(x = total_bill, y = tip/total_bill)) + geom_point(shape = 1)
sp + facet_grid(sex ~ .)
ggplotly()
sp + facet_grid(. ~ sex)
ggplotly()
sp + facet_wrap( ~ day, ncol = 2)
ggplotly()
ggplot(mpg, aes(displ, hwy)) + geom_point() + facet_wrap(~manufacturer)
ggplotly()
install.packages('lattice')
getwd()
library(lattice)
xyplot(data = iris, groups = Species, Sepal.Length ~Petal.Length)
#Scatterplot
splom(trees)
xyplot(data = iris, groups = Species, Sepal.Length ~Petal.Length)
?Titanic
barchart(Class ~ Freq | Sex + Age, data = as.data.frame(Titanic),
groups = Survived, stack = T, layout=c(4,1),
auto.key = list(title = 'Dados Titanic'), columns = 2)
barchart(Class ~ Freq | Sex + Age, data = as.data.frame(Titanic),
groups = Survived, stack = T, layout=c(4,1),
auto.key = list(title = 'Dados Titanic'), columns = 2),
scales = list(x = 'free'))
barchart(Class ~ Freq | Sex + Age, data = as.data.frame(Titanic),
groups = Survived, stack = T, layout=c(4,1),
auto.key = list(title = 'Dados Titanic', columns = 2),
scales = list(x = 'free'))
x = equal.count(rivers)
x
Petallength <-equal.count(iris$Petal.Length, 4)
Petallength
xyplot(Sepal.Length~Sepal.Width | Petallength, data=iris)
Petallength <-equal.count(iris$Petal.Length, 2)
Petallength
xyplot(Sepal.Length~Sepal.Width | Petallength, data=iris)
Petallength <-equal.count(iris$Petal.Length, 4)
Petallength
xyplot(Sepal.Length~Sepal.Width | Petallength, data=iris)
install.packages('ggmap')
install.packages('mapproj')
map1<-get_map(location='Brazil', zoom = 4)
library(ggmap)
library(mapproj)
map1<-get_map(location='Brazil', zoom = 4)
?get_map
map1<-get_map(location= 'Brazil', zoom = 4)
map1<-get_map(location= 'Sao Paulo', zoom = 4)
map1<-get_map(location = 'Brazil', zoom = 4)
map1<-get_map(location = c(lon = 14.2350, lat = 51.9253), zoom = 4)
map2<-get_map(location = c(lon = 54.5260, lat = 15.2551), zoom = 4)
ggmap(map1)
ggmap(map2)
map1<-get_map(location = c(lon = 51.9253 , lat =14.2350 ), zoom = 4)
ggmap(map1)
ggmap(map2)
ggmap(map1)
map2<-get_map(location = c(lon = 15.5260, lat = 15.2551), zoom = 4)
ggmap(map2)
map2<-get_map(location = c(lon = 54.5260, lat = 15.2551), zoom = 4)
map1<-get_map(location = c(lon = - 51.9253 , lat =-14.2350 ), zoom = 4)
ggmap(map1)
ggmap(map2)
map2<-get_map(location = c(lon = 54.5260, lat = 25.2551), zoom = 4)
ggmap(map2)
qmap('Recife')
qmap('L69 3GP', zoom = 16)
qmap('L69 3GP', zoom = 16, maptype = 'satellite')
?maptype
mapImageData1<- get_map(location = c(lon = -0.016179, lat= 51.538525),
color = 'color',
source = 'google',
maptype = 'satellite',
zoom = 17)
ggmap(mapImageData1,
extent = 'device',
ylab = 'Latitude',
xlab = 'Longitude')
mapImageData1<- get_map(location = c(lon = -0.016179, lat= 51.538525),
color = 'color',
source = 'google',
maptype = 'hybrid',
zoom = 17)
mapImageData1<- get_map(location = c(lon = -0.016179, lat= 51.538525),
color = 'color',
source = 'google',
maptype = 'hybrid',
zoom = 17)
ggmap(mapImageData1,
extent = 'device',
ylab = 'Latitude',
xlab = 'Longitude')
#Maps
install.packages('mapdata')
install.packages('maps')
install.packages("maps")
library(maps)
library(mapdata)
map('worldHires', 'Canada',
xlim = c(-141,-53),
ylim = c(40, 85),
col = 'gray90',
fill = TRUE)
?MAP
?map
help(package = 'maps')
install.packages('networkD3')
library(networkD3)
data(MisLinks, MisNodes)
forceNetwork(Links = MisLinks, Nodes = MisNodes, SOurce = 'source',
Target = 'target', Value = 'value', NodeID = 'name',
Group = 'group', opacity = 0.4)
forceNetwork(Links = MisLinks, Nodes = MisNodes, Source = 'source',
Target = 'target', Value = 'value', NodeID = 'name',
Group = 'group', opacity = 0.4)
?networkD3
#Criando dados
src<- c('A','A','A','A',
'B','B','C','C','D')
target<-c('B','C','D','J',
'E','F','G','H','I')
networkData <-data.frame(src, target)
#Plot
simpleNetwork(networkData)
#Heatmap
install.packages('heatmaply')
library(heatmaply)
heatmaply(mtcars, k_col = 2, k_row = 3) %>% layout(margin = list(l = 130, b=40))
install.packages('dygraphs')
library(dygraphs)
dygraph(nhtemp, main = 'Temperaturas')%>%
dyRangeSelector(dateWindow = c('1920-01-01','1960-01-01'))
install.packages('rmaps')
install.packages('googleVis')
library(googleVis)
# Criando um Datafrane
df = data.frame(Pais = c("BR", "CH", "AR"),
ExportaÃ§Ãµes = c(10,13,14),
ImportaÃ§Ãµes = c(23,12,32))
# Criando um Datafrane
df = data.frame(Pais = c("BR", "CH", "AR"),
Exportacoes = c(10,13,14),
Importacoes = c(23,12,32))
#Grafico de linha
Line<-gvisLineChart(df)
plot(Line)
Column <- gvisColumnChart(df)
plot(Column)
#Grafico barras horizontal
Bar<-gvisBarChart(df)
plot(Bar)
#Grafico barras horizontal
Pie<-gvisPieChart(df)
plot(Pie)
#Grafico barras horizontal
Pie<-gvisPieChart(CityPopularity)
plot(Pie)
# GrÃ¡ficos Combinados
Combo <- gvisComboChart(df, xvar = "Pais",
yvar = c("Exportacoes", "Importacoes"),
options = list(seriesType = "bars",
series='{1: {type:"line"}}'))
plot(Combo)
#Scatter chart
Scatter <- gvisScatterChart(women,
options=list(
legend="none",
lineWidth=2, pointSize=0,
title="Women", vAxis="{title:'weight (lbs)'}",
hAxis="{title:'height (in)'}",
width=300, height=300))
plot(Scatter)
#Buble
Bubble <- gvisBubbleChart(Fruits, idvar="Fruit",
xvar="Sales", yvar="Expenses",
colorvar="Year", sizevar="Profit",
options=list(
hAxis='{minValue:75, maxValue:125}'))
plot(Buble)
plot(Bubble)
# Customizando
M <- matrix(nrow=6,ncol=6)
M[col(M)==row(M)] <- 1:6
dat <- data.frame(X=1:6, M)
SC <- gvisScatterChart(dat,
options=list(
title="Customizing points",
legend="right",
pointSize=30,
series="{
0: { pointShape: 'circle' },
1: { pointShape: 'triangle' },
2: { pointShape: 'square' },
3: { pointShape: 'diamond' },
4: { pointShape: 'star' },
5: { pointShape: 'polygon' }
}"))
plot(SC)
# Gauge
Gauge <- gvisGauge(CityPopularity,
options=list(min=0, max=800, greenFrom=500,
greenTo=800, yellowFrom=300, yellowTo=500,
redFrom=0, redTo=300, width=400, height=300))
plot(Gauge)
# Mapas
Intensity <- gvisIntensityMap(df)
plot(Intensity)
# Geo Chart
Geo=gvisGeoChart(Exports, locationvar="Country",
colorvar="Profit",
options=list(projection="kavrayskiy-vii"))
plot(Geo)
# Google Maps
AndrewMap <- gvisMap(Andrew, "LatLong" , "Tip",
options=list(showTip=TRUE,
showLine=TRUE,
enableScrollWheel=TRUE,
mapType='terrain',
useMapTypeControl=TRUE))
plot(AndrewMap)
GeoStates <- gvisGeoChart(states, "state.name", "Illiteracy",
options=list(region="US",
displayMode="regions",
resolution="provinces",
width=600, height=400))
GeoStates <- gvisGeoChart(state, "state.name", "Illiteracy",
options=list(region="US",
displayMode="regions",
resolution="provinces",
width=600, height=400))
states <- data.frame(state.name, state.x77)
GeoStates <- gvisGeoChart(states, "state.name", "Illiteracy",
options=list(region="US",
displayMode="regions",
resolution="provinces",
width=600, height=400))
plot(GeoStates)
# Mais exemplos
demo(googleVis)
setwd("~/Data Science - Curso/RFundamentos_git/R_Cap03")
myfunc <- function(x) {x+x} #recebe parametro {executa operaÃ§Ã£o}
myfunc(10)
library(gdata)
library(XML)
install.packages('XML')
library(XML)
doc.html = htmlTreeParse(https://www.airfree.com/en-US/Home, useInternal = TRUE)
doc.html = htmlTreeParse('https://www.airfree.com/en-US/Home', useInternal = TRUE)
doc.html
doc.text = unlist(xpathApply(doc.html, '//p', xmlValue))
doc.text = gsub('\\n', ' ', doc.text)
doc.text = paste(doc.text, collapse = ' ')
doc.text
doc.html = htmlTreeParse('https://analytics.google.com/analytics/web/#/report-home/a9855664w21683069p72729873', useInternal = TRUE)
install.packages('RGoogleAnalytic')
install.packages('Tatvic/RGoogleAnalytics')
?Tatvic/RGoogleAnalytics
library(Tatvic/RGoogleAnalytics)
install.packages('RGoogleAnalytics')
install.packages("googleAuthR")
install.packages("googleAnalyticsR")
library(googleAuthR)
ga_auth()
?ga_auth()
?ga
?googleAuthR
Sys.getenv("GA_AUTH_FILE")
gar_auth("ga.oauth")
library(googleAnalyticsR)
gar_auth("ga.oauth")
getwd()
setwd("~/Airfree_projetos/R")
getwd()
?Startup
# Exercício 1  Crie uma função que receba e vetores como parâmetro,  converta os em um dataframe e imprima
install.packages('pdftools')
library(pdftools)
library(stringr)
library(xlsx)
install.packages('xlsx')
library(xlsx)
library("xlsx", lib.loc="~/R/win-library/3.5")
tx <- pdf_text("Área de Trabalho\22JUN2017 CE&Asia price tables")
tx <- pdf_text("Área de Trabalho\\22JUN2017 CE&Asia price tables")
tx <- pdf_text("Documentos\\22JUN2017 CE&Asia price tables")
tx <- pdf_text("C:\Users\BI\Documents\Airfree_projetos\\22JUN2017 CE&Asia price tables")
tx <- pdf_text("C:\\Users\\BI\\Documents\\Airfree_projetos\\22JUN2017 CE&Asia price tables")
tx <- pdf_text("C:\\Users\\BI\\Documents\\Airfree_projetos\\22JUN2017 CE&Asia price tables.pdf")
tx2 <- unlist(str_split(tx, "[\\r\\n]+"))
tx3 <- str_split_fixed(str_trim(tx2), "\\s{2,}", 5)
write.xlsx(tx3, file="ds.xlsx")
library(xlsx)
library(xlsx)
write.xlsx(tx3, file="ds.xlsx")
install.packages('xlsx')
install.packages("xlsx")
library(pdftools)
library(stringr)
library(xlsx)
tx <- pdf_text("C:\\Users\\BI\\Documents\\Airfree_projetos\\22JUN2017 CE&Asia price tables.pdf")
tx2 <- unlist(str_split(tx, "[\\r\\n]+"))
tx3 <- str_split_fixed(str_trim(tx2), "\\s{2,}", 5)
write.xlsx(tx3, file="ds.xlsx")
myfunc <- function(x) {x+x} #recebe parametro {executa operaÃ§Ã£o}
myfunc(10)
vet<- function(x, y){
c(x:y)
}
vet(10:20)
vet(10,20)
df<-function(c(x,y), c(z,w)){
data.frame()
}
df<-function(c(x,y), c(z,w)){
data.frame(c(x,y), c(z,w))
}
df<-function(c(x,y), c(z,w)){
data.frame(c(x,y), c(z,w))
}
df<-function(vet1, vet2){
data.frame(vet1, vet2)
}
df(c(2,3), c(5,30))
setwd("~/Data Science - Curso/RFundamentos_git/Cap03_exercicios")
mat<-matrix(c(1:16), nr = 4, nc = 4)
mat
mean(mat)
rowMeans(mat)
escola <- data.frame(Aluno = c('Alan', 'Alice', 'Alana', 'Aline', 'Alex', 'Ajay'),
Matemática = c(90, 80, 85, 87, 56, 79),
Geografia = c(100, 78, 86, 90, 98, 67),
Química = c(76, 56, 89, 90, 100, 87))
escola
mean(escola[Matematica])
mean(escola[Matemática])
colMeans(escola[Matemática])
??mean
?data.frame
class(escola)
type(escola)
mean(escola[Matemática])
row.names.data.frame(escola)
colnames(escola)
colMeans(escola)
colMeans(escola[Matemática],escola[Geografia], escola[Química])
colMeans(escola[,Matemática],escola[,Geografia], escola[,Química])
colnames(escola)
colMeans(Matemática)
colMeans(escola)
colnames(escola)
mean(escola[,Matemática])
escola <- data.frame(Aluno = c('Alan', 'Alice', 'Alana', 'Aline', 'Alex', 'Ajay'),
Matemática = c(90, 80, 85, 87, 56, 79),
Geografia = c(100, 78, 86, 90, 98, 67),
Química = c(76, 56, 89, 90, 100, 87))
escola
mean(escola[,Geografia])
mean(escola[Geografia,])
mean(escola [[Geografia]])
mean(escola[[Geografia]])
mean(escola[[,Geografia]])
colnames(escola)
mean(escola[["Geografia"]])
mean(escola[["Geografia"]], escola[["Matemática"]])
mean(escola[["Geografia"]])
colMeans(escola[["Geografia"]])
mean(escola[["Geografia"]])
Geografia<-mean(escola[["Geografia"]])
Geografia
Matemática<-mean(escola[["Matemática"]])
Química<-mean(escola[["Química"]])
Media<-c(Matemática, Geografia, Química)
Media
?apply
??apply
lapply(escola, mean)
subset(escola[[1:2]] )
subset(escola[[1:2]])
?subset()
subset.data.frame(escola, select = escola$Matemática, escola$Geografia, escola$Química)
subset.data.frame(yes, select = escola$Matemática, escola$Geografia, escola$Química)
subset.data.frame(escola, select = escola$Matemática, escola$Geografia, escola$Química)
?subset.data.frame()
subset.data.frame(escola, select = c(escola$Matemática, escola$Geografia, escola$Química))
subset.data.frame(escola, select = c(Matemática, Geografia, Química))
media<-subset.data.frame(escola, select = c(Matemática, Geografia, Química))
lapply(media, mean)
media_final<-lapply(media, mean)
media_final
valorfinal<-c(media_final)
valorfinal
?list
l1<-list(1,2,3)
l1
class(l1)
lapply(l1, sum)
sapply(l1, sum)
apply(l1, sum)
?apply()
apply(l1, 1, sum)
apply(l1, sum)
sapply(l1, sum)
tapply(l1, sum)
apply(l1, sum)
?sapply()
sapply(l1, sum)
sapply(l1, FUN = sum)
sapply(l1, 1, sum)
sapply(l1, sum)
l1
lista1<- list(a = (1:10), b = (45:77))
lapply(lista1, sum)
sapply(lista1, sum)
sapply(lista1, mean) ###objeto que quero percorrer, funÃ§Ã£o. sapply Ã© um loop
x <- matrix(rnorm(9), nr = 3, byrow = T)
x
apply(x, 1, mean)
?do.call()
do.call(sum, l1)
vt1<-vector(l1)
?vector
as.vector(l1)
vet1<-as.vector(l1)
class(vet1)
is.vector(l1)
class(l1)
do.call(sum, l1)
v=as.vector(l1)
class(v)
v<-unlist(l1, use.names=FALSE)
class(v)
vec<-c(v)
vec
class(vec)
library(dplyr)
?dplyr
??dplyr
do.call(sum, l1)
v<-unlist(l1, use.names=FALSE)
class(v)
v
vec1=c('Alan', 'Alice', 'Alana', 'Aline', 'Alex', 'Ajay')
vec1
class(vec1)
typeof(vec1)
typeof(v)
is.vector(v())
is.vector(l1())
is.vector(v)
str <- c("Expressoes", "regulares", "em linguagem R",
"permitem a busca de padroes", "e exploracao de textos",
"podemos buscar padroes em digitos",
"como por exemplo",
"10992451280")
length(str)
str
?grep()
?gsub()
gsub('textos', 'frases',str)
# Exercício 7 - Usando o dataset mtcars, crie um gráfico
# com ggplot do tipo scatter plot. Use as
# colunas disp e mpg nos eixos x e y respectivamente
head(mtcars)
trail(mtcars)
tail(mtcars)
library(ggplot2)
camada1<-geom_point(
mapping = aes(x=mtcars$disp, y=mtcars$mpg, color=sex),
data = tips,
size=3
)
camada1<-geom_point(
mapping = aes(x=mtcars$disp, y=mtcars$mpg, color=sex),
data = mtcars,
size=3
)
ggplot(camada1)
ggplot()+camada1
camada1<-geom_point(
mapping = aes(x=mtcars$disp, y=mtcars$mpg, color='sex'),
data = mtcars,
size=3
)
ggplot()+camada1
?aes
